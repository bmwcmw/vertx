#########################
# Gatling Configuration #
#########################

# This file contains all the settings configurable for Gatling with their default values

gatling {
  charting {
    noReports = false       # When set to true, don't generate HTML reports
    maxPlotPerSeries = 1000 # Number of points per graph in Gatling reports
    useGroupDurationMetric = false  # Switch group timings from cumulated response time to group duration.
    indicators {
      lowerBound = 30      # Lower bound for the requests' response time to track in the reports and the console summary
      higherBound = 60    # Higher bound for the requests' response time to track in the reports and the console summary
      percentile1 = 50      # Value for the 1st percentile to track in the reports, the console summary and Graphite
      percentile2 = 75      # Value for the 2nd percentile to track in the reports, the console summary and Graphite
      percentile3 = 95      # Value for the 3rd percentile to track in the reports, the console summary and Graphite
      percentile4 = 99      # Value for the 4th percentile to track in the reports, the console summary and Graphite
    }
  }
  http {
    fetchedCssCacheMaxCapacity = 200          # Cache size for CSS parsed content, set to 0 to disable
    fetchedHtmlCacheMaxCapacity = 200         # Cache size for HTML parsed content, set to 0 to disable
    perUserCacheMaxCapacity = 200             # Per virtual user cache size, set to 0 to disable
    warmUpUrl = "http://gatling.io"           # The URL to use to warm-up the HTTP stack (blank means disabled)
    enableGA = true                           # Very light Google Analytics, please support
    ssl {
      keyStore {
        type = ""      # Type of SSLContext's KeyManagers store
        file = ""      # Location of SSLContext's KeyManagers store
        password = ""  # Password for SSLContext's KeyManagers store
        algorithm = "" # Algorithm used SSLContext's KeyManagers store
      }
      trustStore {
        type = ""      # Type of SSLContext's TrustManagers store
        file = ""      # Location of SSLContext's TrustManagers store
        password = ""  # Password for SSLContext's TrustManagers store
        algorithm = "" # Algorithm used by SSLContext's TrustManagers store
      }
    }
    ahc {
      keepAlive = true                                    # Allow pooling HTTP connections (keep-alive header automatically added)
      connectTimeout = 10000                              # Timeout when establishing a connection
      handshakeTimeout = 10000                            # Timeout when performing TLS hashshake
      pooledConnectionIdleTimeout = 60000                 # Timeout when a connection stays unused in the pool
      readTimeout = 60000                                 # Timeout when a used connection stays idle
      maxRetry = 2                                        # Number of times that a request should be tried again
      requestTimeout = 60000                              # Timeout of the requests
      disableHttpsEndpointIdentificationAlgorithm = true  # When set to true, don't enable SSL algorithm on the SSLEngine
      httpClientCodecMaxChunkSize = 8192                  # Maximum length of the content or each chunk
      httpClientCodecInitialBufferSize = 128              # Initial HttpClientCodec buffer size
      sslEnabledProtocols = [TLSv1.2, TLSv1.1, TLSv1]     # Array of enabled protocols for HTTPS, if empty use the JDK defaults
      sslEnabledCipherSuites = []                         # Array of enabled cipher suites for HTTPS, if empty use the AHC defaults
      sslSessionCacheSize = 0                             # SSLSession cache size, set to 0 to use JDK's default
      sslSessionTimeout = 0                               # SSLSession timeout in seconds, set to 0 to use JDK's default (24h)
      useOpenSsl = false                                  # if OpenSSL should be used instead of JSSE (requires tcnative jar)
      useNativeTransport = false                          # if native transport should be used instead of Java NIO (requires netty-transport-native-epoll, currently Linux only)
      tcpNoDelay = true
      soReuseAddress = false
      soLinger = -1
      soSndBuf = -1
      soRcvBuf = -1
      allocator = "pooled"                            # switch to unpooled for unpooled ByteBufAllocator
      maxThreadLocalCharBufferSize = 200000           # Netty's default is 16k
    }
    dns {
      queryTimeout = 5000                             # Timeout of each DNS query in millis
      maxQueriesPerResolve = 6                        # Maximum allowed number of DNS queries for a given name resolution
    }
  }
}